---
description: MCP (Model Context Protocol) 서버를 NPM 패키지로 릴리스하기 위한 단계 및 절차
globs: "package.json, **/package.json"
alwaysApply: false
---

# MCP 서버 릴리스하기

이 문서는 MCP (Model Context Protocol) 서버의 새 버전을 NPM 패키지로 릴리스하는 단계를 설명합니다.

## 자동화된 릴리스 준비

많은 MCP 프로젝트에는 릴리스 전에 포괄적인 검사를 수행하는 자동화된 릴리스 준비 스크립트가 포함되어 있습니다. 다음 명령으로 실행하세요:

```bash
npm run prepare-release
```

이 스크립트는 일반적으로 다음 검사를 수행합니다:
- **Git 상태**: main 브랜치에 있고 커밋되지 않은 변경사항이 없는지 확인
- **필수 필드**: package.json의 모든 필수 필드 검증
- **종속성**: 누락되거나 오래된 종속성 확인
- **보안 감사**: npm audit을 실행하여 취약점 확인
- **버전 가용성**: 버전이 이미 게시되지 않았는지 확인
- **버전 일관성**: package.json과 package-lock.json 버전이 일치하는지 확인
- **변경 로그 항목**: CHANGELOG.md에 현재 버전에 대한 항목이 있는지 확인
- **TypeScript**: 컴파일 및 테스트 실행
- **TypeScript 선언**: .d.ts 파일이 생성되는지 확인
- **네이티브 코드** (해당하는 경우): Swift/기타 언어에 대한 포맷, 린트 및 테스트 실행
- **빌드 검증**: 모든 것을 빌드하고 패키지 검증
- **패키지 크기**: 패키지가 합리적인 크기 제한을 초과하면 경고
- **MCP 서버 스모크 테스트**: 간단한 JSON-RPC 요청으로 서버 테스트

모든 검사를 통과하면 아래의 수동 단계를 따르세요.

## 수동 릴리스 전 단계

1.  **버전 번호 업데이트:**
    - 새로운 시맨틱 버전 번호를 결정합니다(예: `1.0.0-beta.3`, `1.0.0`, `1.1.0`).
    - `package.json`의 `version` 필드를 업데이트합니다.

2.  **문서 업데이트:**
    - **`README.md`**: 최신 기능, 설치 지침 및 모든 중대한 변경사항을 정확히 반영하는지 확인합니다.
    - **API 문서**: 도구 스키마나 서버 동작에 변경사항이 있는 경우 상세한 사양을 업데이트합니다.
    - 기타 관련 문서.

3.  **`CHANGELOG.md` 업데이트:**
    - 예정된 릴리스 버전에 대한 새로운 섹션을 추가합니다(예: `## [1.0.0-beta.3] - YYYY-MM-DD`).
    - 이 버전 아래에 모든 주목할 만한 변경사항(추가됨, 변경됨, 수정됨, 제거됨, 사용 중단됨, 보안)을 나열합니다.
    - `YYYY-MM-DD`를 현재 날짜로 교체합니다.

4.  **릴리스 준비 실행:**
    - `npm run prepare-release`를 실행하여 모든 것이 준비되었는지 확인합니다.
    - 스크립트에서 식별된 문제를 수정합니다.

5.  **로컬 컴파일 테스트:**
    - **필수**: 컴파일하고 로컬 테스트를 실행하여 올바르게 빌드되는지 확인합니다.
    - **CI 제한**: 많은 테스트에는 시스템 권한(Apple Events, 파일 시스템 액세스 등)이 필요할 수 있으며 CI에서는 이를 부여할 수 없습니다. 따라서 포괄적인 로컬 테스트가 필수적입니다.
    - 적절한 권한으로 모든 테스트 스위트를 로컬에서 실행하여 통과하는지 확인합니다.
    - **중요**: 최초 실행 시 시스템 권한을 요청할 수 있습니다. 테스트가 작동하도록 필요한 액세스를 부여하세요.
    - 권한 의존적인 테스트는 CI 환경에서 완전히 검증될 수 없으므로 이 단계가 중요합니다.

6.  **변경사항 커밋:**
    - 버전 범프, 문서 및 변경 로그와 관련된 모든 변경사항을 커밋합니다.
    - `git add .`
    - `git commit -m "릴리스 vX.Y.Z 준비"`

## NPM에 게시

1.  **NPM 게시 드라이 런:**
    - 이 단계는 실제로 게시하지 않고 패키지에 포함될 파일을 확인하는 데 중요합니다.
    - `npm publish --access public --tag <your_tag> --dry-run`
        - `<your_tag>`를 적절한 태그(예: `beta`, `latest`)로 교체합니다. 프리릴리스의 경우 항상 `beta` 또는 `rc`와 같은 특정 태그를 사용합니다.
        - 스코프 패키지가 공개를 위한 것이라면 `--access public`이 필요합니다.
    - 파일 목록을 주의 깊게 검토합니다. 필요한 파일(`dist/`, 해당하는 경우 바이너리, `package.json`, `README.md`, `CHANGELOG.md`, 그리고 `LICENSE`)이 포함되어 있는지 확인합니다. 불필요한 파일이 포함되지 않았는지 확인합니다.

2.  **실제 NPM 게시:**
    - 드라이 런이 만족스럽다면 실제 게시 명령을 진행합니다.
    - 버전이 베타인 경우 "beta" 태그를 사용하고, 그렇지 않으면 태그를 생략하여 릴리스 버전을 수행합니다.
    - `npm publish --access public --tag <your_tag>`

## 게시 후 단계

1.  **Git 태그 생성:**
    - 새 버전에 대한 Git 태그를 생성합니다.
    - `git tag vX.Y.Z` (예: `git tag v1.0.0-beta.3`)

2.  **Git 태그 푸시:**
    - 태그를 원격 저장소에 푸시합니다.
    - `git push origin vX.Y.Z`

3.  **GitHub 릴리스 생성 (권장):**
    - GitHub 저장소의 "릴리스" 섹션으로 이동합니다.
    - 방금 푸시한 태그를 선택하여 새 릴리스를 초안으로 작성합니다.
    - `CHANGELOG.md`의 관련 섹션을 릴리스 설명에 복사합니다.
    - 원하는 경우 빌드 아티팩트(컴파일된 바이너리나 `.tgz` NPM 패키지)를 직접 다운로드할 수 있도록 GitHub 릴리스에 첨부할 수도 있습니다.

4.  **릴리스 발표 (선택사항):**
    - 관련 채널(예: 팀 채팅, Twitter, 프로젝트 웹사이트, MCP 커뮤니티)에서 새 릴리스를 발표합니다.

---

**`prepublishOnly`에 대한 참고사항:** 대부분의 MCP 프로젝트는 `package.json`에 빌드 프로세스를 실행하는 `prepublishOnly` 스크립트를 가져야 합니다. 이는 게시 전에 프로젝트가 항상 빌드되도록 보장합니다.