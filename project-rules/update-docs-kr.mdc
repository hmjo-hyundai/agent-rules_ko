# 문서 업데이트

**구체적인 파일 참조와 함께 `docs/*.md` 파일을 생성하거나 업데이트합니다**

## 분석 방법론

각 영역에 대해 에이전트는 다음을 수행해야 합니다:
1. **핵심 파일 검토**: 빌드 구성, 테스트 파일, 배포 스크립트, 주요 소스 파일 검토
2. **파일 참조 추출**: 특정 파일, 줄 번호 및 예제 기록
3. **패턴 식별**: 반복되는 구조, 명명 규칙, 일반적인 워크플로우 찾기
4. **LLM 친화적 콘텐츠 작성**: 토큰 효율적, 참조 중심, 실용적인 예제

## 특정 파일 요구 사항

다음 작업 호출을 병렬로 수행:

**프로젝트 개요** (`docs/project-overview.md`):
구조:
- 개요: 프로젝트 정의, 핵심 목적, 주요 가치 제안(2-3 단락)
- 주요 파일: 주요 진입점 및 핵심 구성 파일
- 기술 스택: 구체적인 파일 예제가 포함된 핵심 기술
- 플랫폼 지원: 플랫폼별 파일 위치가 포함된 요구 사항

**아키텍처** (`docs/architecture.md`):
구조:
- 개요: 고수준 시스템 구성(2-3 단락)
- 컴포넌트 맵: 소스 파일 위치를 포함한 주요 컴포넌트
- 주요 파일: 간략한 설명이 포함된 핵심 헤더 및 구현
- 데이터 흐름: 특정 함수/파일 참조가 포함된 정보 흐름

**빌드 시스템** (`docs/build-system.md`):
구조:
- 개요: 주요 빌드 구성에 대한 파일 참조가 포함된 빌드 시스템
- 빌드 워크플로우: 특정 명령 및 구성 파일이 포함된 일반적인 작업
- 플랫폼 설정: 파일 경로가 포함된 플랫폼별 요구 사항
- 참조: 파일 위치가 포함된 빌드 대상, 프리셋 및 문제 해결

**테스팅** (`docs/testing.md`):
구조:
- 개요: 테스트 파일 위치가 포함된 테스트 접근 방식
- 테스트 유형: 특정 파일 예제가 포함된 다양한 테스트 카테고리
- 테스트 실행: 명령과 파일 경로 및 예상 출력

**개발** (`docs/development.md`):
구조:
- 개요: 개발 환경, 코드 스타일, 패턴(기존 patterns.md가 있는 경우 병합)
- 코드 스타일: 특정 파일 예제가 포함된 규칙(코드베이스의 실제 코드 표시)
- 일반적인 패턴: 코드베이스의 파일 참조 및 예제가 포함된 구현 패턴
- 워크플로우: 구체적인 파일 위치 및 예제가 포함된 개발 작업
- 참조: 파일 구성, 명명 규칙, 특정 파일이 포함된 일반적인 문제

**배포** (`docs/deployment.md`):
구조:
- 개요: 스크립트 참조가 포함된 패키징 및 배포
- 패키지 유형: 빌드 대상 및 출력 위치가 포함된 다양한 패키지
- 플랫폼 배포: 파일 경로가 포함된 플랫폼별 패키징
- 참조: 배포 스크립트, 출력 위치, 서버 구성

**파일 카탈로그** (`docs/files.md`):
구조:
- 개요: 설명 및 관계가 포함된 포괄적인 파일 카탈로그(2-3 단락)
- 핵심 소스 파일: 목적 설명이 포함된 주요 애플리케이션 로직
- 플랫폼 구현: 인터페이스 매핑이 포함된 플랫폼별 코드
- 빌드 시스템: 빌드 구성 및 도우미 모듈
- 구성: 자산, 스크립트, 구성 - 지원 파일 및 역할
- 참조: 파일 구성 패턴, 명명 규칙, 종속성 관계

## 중요 요구 사항

### LLM 최적화 형식
- **토큰 효율적**: 중복된 설명 피하고, 필수 정보에 집중
- **구체적인 파일 참조**: 항상 특정 파일 경로 포함, 도움이 될 때 줄 번호 포함
- **유연한 형식**: 엄격한 단계별 대신 하위 섹션, 코드 블록, 예제 사용
- **패턴 예제**: 일반적인 예제가 아닌 코드베이스의 실제 코드 표시

### 중복 없음
- 각 정보는 정확히 한 파일에만 나타남
- 빌드 정보는 build-system.md에만
- 코드 스타일 및 패턴은 development.md에만
- 배포 정보는 deployment.md에만
- 다음을 사용한 상호 참조: "참조 [docs/filename.md](docs/filename.md)"

### 파일 참조 형식
항상 특정 파일 참조 포함:
```
**핵심 시스템** - src/core.h(15-45줄)의 핵심 구현, src/platform/의 플랫폼 백엔드

**빌드 구성** - 주요 빌드 파일(67-89줄), 구성 파일

**모듈 관리** - src/module.h의 인터페이스, src/module.c의 구현(134줄의 key_function)
```

### 실용적인 예제
코드베이스의 실제 코드 사용:
```c
// src/example.h:23-27에서
typedef struct {
    bool active;
    void *data;
    int count;
} ExampleState;
```

## 최종 단계

모든 작업이 완료된 후:

1. **최종 문서화를 최소한의 LLM 친화적인 README.md로 통합**
2. **모든 파일에서 중복 제거**