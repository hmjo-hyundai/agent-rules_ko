# 커밋

기존 커밋 메시지와 이모지를 사용하여 잘 포맷된 커밋을 생성합니다.

## 기능:
- 기본적으로 사전 커밋 검사 실행 (린트, 빌드, 문서 생성)
- 스테이징된 파일이 없으면 자동으로 파일 스테이징
- 설명적인 이모지와 함께 기존 커밋 포맷 사용
- 다른 관심사에 대한 커밋 분할 제안

## 사용법:
- `/commit` - 사전 커밋 검사와 함께 표준 커밋
- `/commit --no-verify` - 사전 커밋 검사 건너뛰기

## 커밋 타입:
- ✨ feat: 새로운 기능
- 🐛 fix: 버그 수정
- 📝 docs: 문서 변경
- ♻️ refactor: 기능 변경 없는 코드 구조 변경
- 🎨 style: 코드 포맷팅, 세미콜론 누락 등
- ⚡️ perf: 성능 개선
- ✅ test: 테스트 추가 또는 수정
- 🧑‍💻 chore: 도구, 설정, 유지보수
- 🚧 wip: 진행 중인 작업
- 🔥 remove: 코드 또는 파일 삭제
- 🚑 hotfix: 중요한 수정
- 🔒 security: 보안 개선

## 프로세스:
1. 스테이징된 변경사항 확인 (`git status`)
2. 스테이징된 변경사항이 없으면 적절한 파일 검토 및 스테이징
3. 사전 커밋 검사 실행 (--no-verify가 아닌 경우)
4. 변경사항 분석하여 커밋 타입 결정
5. 설명적인 커밋 메시지 생성
6. 적용 가능한 경우 범위 포함: `type(scope): description`
7. 복잡한 변경사항에 대해 이유를 설명하는 본문 추가
8. 커밋 실행

## 모범 사례:
- 커밋을 원자적이고 집중적으로 유지
- 명령형 어조로 작성 ("Add feature", "Added feature" 아님)
- 무엇을 했는지가 아니라 왜 했는지 설명
- 관련 이슈/PR 참조
- 관련 없는 변경사항을 별도 커밋으로 분할