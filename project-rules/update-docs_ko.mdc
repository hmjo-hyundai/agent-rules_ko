# 문서 업데이트

구체적인 파일 참조와 유연한 형식을 가진 LLM 최적화 문서를 생성합니다.

## 작업

다음을 가능하게 하는 문서를 생성합니다:
- **프로젝트 목적 이해** - 프로젝트가 무엇을 하는지와 이유
- **아키텍처 개요 획득** - 시스템이 어떻게 구성되어 있는지
- **모든 플랫폼에서 빌드** - 파일 참조가 있는 빌드 지침
- **기능/하위 시스템 추가** - 예시와 함께 확립된 패턴 따르기
- **애플리케이션 디버그** - 구체적인 파일 위치로 문제 해결
- **테스트 및 테스트 추가** - 기존 테스트 실행 및 새 테스트 생성
- **배포 및 배포** - 소프트웨어 패키징 및 배포

## 필수 문서 구조

각 문서는 다음을 포함해야 합니다:
1. **타임스탬프 헤더** - 마지막 업데이트 타임스탬프가 있는 숨겨진 주석
2. **간략한 개요** (최대 2-3 문단)
3. **핵심 파일 및 예시** - 각 주요 주제에 대한 구체적인 파일 참조
4. **일반적인 워크플로우** - 파일 위치가 있는 실용적인 가이드
5. **참조 정보** - 파일 경로가 있는 빠른 조회 표

## 타임스탬프 형식

생성된 각 파일은 다음으로 시작해야 합니다:
```
<!-- Generated: YYYY-MM-DD HH:MM:SS UTC -->
```

## 프로세스

다음을 수행합니다:
1. **코드베이스를 체계적으로 분석** (개발+패턴 병합하여 7개 주요 영역에 걸쳐)
2. **구체적인 파일 참조와 함께 문서를 생성 또는 업데이트** `docs/*.md`에
3. **최종 문서를 최소하고 LLM 친화적인 README.md로 합성**
4. **파일 간 모든 중복 제거**

## 분석 방법론

각 영역에 대해 에이전트는 다음을 수행해야 합니다:
1. **핵심 파일 검사**: 빌드 설정, 테스트 파일, 배포 스크립트, 주요 소스 파일 찾기
2. **파일 참조 추출**: 구체적인 파일, 줄 번호, 예시 기록
3. **패턴 식별**: 반복되는 구조, 네이밍 규칙, 일반적인 워크플로우 찾기
4. **LLM 친화적인 콘텐츠 생성**: 토큰 효율적, 참조 중심, 실용적 예시

## 구체적인 파일 요구사항

다음 Task 호출을 병렬로 실행하세요:

**프로젝트 개요** (`docs/project-overview.md`):
구조:
- 개요: 프로젝트가 무엇인지, 핵심 목적, 주요 가치 제안 (2-3 문단)
- 핵심 파일: 주요 진입점과 핵심 설정 파일
- 기술 스택: 구체적인 파일 예시가 있는 핵심 기술
- 플랫폼 지원: 플랫폼별 파일 위치가 있는 요구사항

**아키텍처** (`docs/architecture.md`):
구조:
- 개요: 상위 수준 시스템 구성 (2-3 문단)
- 컴포넌트 맵: 소스 파일 위치가 있는 주요 컴포넌트
- 핵심 파일: 간략한 설명이 있는 핵심 헤더와 구현
- 데이터 흐름: 구체적인 함수/파일 참조와 함께 정보 흐름

**빌드 시스템** (`docs/build-system.md`):
구조:
- 개요: 주요 빌드 설정에 대한 파일 참조가 있는 빌드 시스템
- 빌드 워크플로우: 구체적인 명령과 설정 파일이 있는 일반적인 작업
- 플랫폼 설정: 파일 경로가 있는 플랫폼별 요구사항
- 참조: 파일 위치가 있는 빌드 대상, 프리셋, 문제 해결

**테스팅** (`docs/testing.md`):
구조:
- 개요: 테스트 파일 위치가 있는 테스트 접근법
- 테스트 타입: 구체적인 파일 예시가 있는 다양한 테스트 카테고리
- 테스트 실행: 파일 경로와 예상 출력이 있는 명령
- 참조: 테스트 파일 구성과 빌드 시스템 테스트 대상

**개발** (`docs/development.md`):
구조:
- 개요: 개발 환경, 코드 스타일, 패턴 (기존 patterns.md와 병합)
- 코드 스타일: 구체적인 파일 예시가 있는 규칙 (코드베이스의 실제 코드 표시)
- 일반적인 패턴: 파일 참조와 코드베이스 예시가 있는 구현 패턴
- 워크플로우: 구체적인 파일 위치와 예시가 있는 개발 작업
- 참조: 파일 구성, 네이밍 규칙, 구체적인 파일이 있는 일반적인 문제

**배포** (`docs/deployment.md`):
구조:
- 개요: 스크립트 참조가 있는 패키징 및 배포
- 패키지 타입: 빌드 대상과 출력 위치가 있는 다양한 패키지
- 플랫폼 배포: 파일 경로가 있는 플랫폼별 패키징
- 참조: 배포 스크립트, 출력 위치, 서버 구성

**파일 카탈로그** (`docs/files.md`):
구조:
- 개요: 설명과 관계가 있는 포괄적인 파일 카탈로그 (2-3 문단)
- 핵심 소스 파일: 목적 설명이 있는 주요 애플리케이션 로직
- 플랫폼 구현: 인터페이스 매핑이 있는 플랫폼별 코드
- 빌드 시스템: 빌드 설정과 헬퍼 모듈
- 설정: 자산, 스크립트, 설정 - 지원 파일과 그 역할
- 참조: 파일 구성 패턴, 네이밍 규칙, 종속성 관계

## 중요 요구사항

### LLM 최적화 형식
- **토큰 효율성**: 중복 설명 피하기, 필수 정보에 집중
- **구체적인 파일 참조**: 항상 구체적인 파일 경로, 도움이 될 때 줄 번호 포함
- **유연한 형식**: 경직된 단계별 대신 하위 섹션, 코드 블록, 예시 사용
- **패턴 예시**: 일반적인 예시가 아닌 코드베이스의 실제 코드 표시

### 중복 없음
- 각 정보는 정확히 하나의 파일에만 나타남
- 빌드 정보는 build-system.md에만
- 코드 스타일과 패턴은 development.md에만
- 배포 정보는 deployment.md에만
- 상호 참조 사용: "참조 [docs/filename.md](docs/filename.md)"

### 파일 참조 형식
항상 구체적인 파일 참조 포함:
```
**핵심 시스템** - src/core.h의 핵심 구현 (15-45줄), src/platform/의 플랫폼 백엔드

**빌드 설정** - 주요 빌드 파일 (67-89줄), 설정 파일

**모듈 관리** - src/module.h의 인터페이스, src/module.c의 구현 (134줄의 key_function)
```

### 실용적인 예시
코드베이스의 실제 코드 사용:
```c
// src/example.h:23-27에서
typedef struct {
    bool active;
    void *data;
    int count;
} ExampleState;
```

## 최종 단계

모든 작업 완료 후:

1. **모든 `docs/*.md` 파일 읽기**하고 다음으로 README.md 생성:
   - 프로젝트 설명 (최대 2-3 문장)
   - 핵심 진입점과 핵심 설정 파일
   - 빠른 빌드 명령
   - LLM이 유용하다고 생각할 내용에 대한 간략한 설명이 있는 문서 링크
   - 총 50줄 이내로 유지

2. **중복 검사**: 모든 파일을 스캔하고 중복된 정보 제거

3. **파일 참조 검사**: 모든 파일 경로가 정확하고 유용한지 확인

## 에이전트 지침

각 에이전트는 다음을 수행해야 합니다:
1. **기존 파일 읽기** (존재하는 경우) 현재 내용 이해
2. **관련 코드베이스 파일을 체계적으로 분석**
3. **분석 전반에 걸쳐 구체적인 파일 참조 추출**:
   - 중요한 헤더, 소스 파일, 설정 파일 기록
   - 도움이 될 때 핵심 함수/섹션에 대한 줄 번호 포함
   - 코드베이스의 실제 코드 예시 참조
4. **LLM 친화적인 콘텐츠 생성**:
   - 토큰 효율적인 작성 (중복 설명 없음)
   - 전반에 걸쳐 구체적인 파일 경로와 예시
   - 유연한 형식 (하위 섹션, 코드 블록, 실용적인 가이드)
   - LLM이 코드를 이해하고 작업하는 데 필요한 것에 집중
5. **구체적인 파일 참조가 있는 실용적인 워크플로우 포함**
6. **파일 위치와 줄 번호가 있는 참조 섹션 생성**
7. **현재 UTC 시간으로 맨 위 타임스탬프 업데이트**
8. **생성된 파일 읽기**하고 정확성과 완전성을 위해 수정

**성공 기준**: 각 파일은 LLM이 코드베이스를 빠르게 이해하고 특정 작업에 적합한 파일을 찾는 데 도움이 되는 실용적인 참조여야 합니다.

**development.md를 위한 특별 참고사항**: 기존 development.md와 patterns.md(존재하는 경우)의 내용을 구현 패턴이 있는 단일 포괄적인 개발 가이드로 병합하세요.

조정 에이전트는 다음을 수행해야 합니다:
1. 모든 에이전트가 완료될 때까지 대기
2. 생성된 모든 파일 읽기
3. 발견된 모든 중복 제거
4. 핵심 파일 참조가 있는 최소한의 LLM 최적화 README.md 생성
5. **현재 UTC 시간으로 README.md 타임스탬프 업데이트**
6. development.md로 병합되었으므로 존재하는 경우 docs/patterns.md 삭제

## 파일 에이전트 지침

파일 에이전트는 최소한의 토큰 효율적인 파일 카탈로그를 생성해야 합니다:

1. **파일 발견**: Glob과 LS를 사용하여 모든 소스 파일, 설정, 빌드 파일 찾기
2. **기능별 그룹화**: 파일을 논리적 카테고리로 구성 (핵심, 플랫폼, 빌드, 테스트, 설정)
3. **간략한 설명**: 중요한 파일당 주요 목적을 설명하는 한 줄
4. **핵심 진입점**: 주요 파일, 빌드 설정, 중요한 헤더 강조
5. **종속성**: 파일 그룹 간 주요 관계 기록

**형식**: 파일 경로와 한 문장 설명이 있는 간결한 목록. 포괄적인 문서가 아닌 LLM이 기능을 빠르게 찾도록 돕는 데 집중.

**성공 기준**: LLM이 상세한 설명을 읽지 않고도 "주요 진입점은 어디인가", "X를 처리하는 파일은 어떤 것인가", "핵심 헤더는 무엇인가"를 빠르게 찾을 수 있어야 합니다.